/* Generated By:JavaCC: Do not edit this line. EG1.java */
package javacccode;
import java.util.*;
import java.io.*;
import datastructure.*;
import cgcdb.*;




public class EG1 implements EG1Constants {
        static CGCDB db;
        static Protocol protocol;
        static Condition condition;


        // Result file .txt in /result/
        static PrintStream logwriter;
        static PrintStream picwriter;
        static PrintStream PEwriter;
        static PrintStream errorwriter;
        static PrintStream TestListwriter;

        static PrintStream Awriter;
        static PrintStream Rwriter;
        static PrintStream Mwriter;
        static PrintStream Owriter;
        static PrintStream O1writer;
        static PrintStream O2writer;
        static PrintStream O4writer;

        public static void main(String args []) throws ParseException{

                // Connect to Database and Get Data
                db = new CGCDB();

                // Initial Parser
                StringReader init = new StringReader(" ");
                EG1 parser = new EG1(init);


                //-------- Setup Result Writer --------
                File logfile = new File("result/log.txt");
                File picfile = new File("result/misspic.txt");
                File PEfile = new File("result/Parse_Error_log.txt");
                File errorfile = new File("result/Error_log.txt");
                File TestListfile = new File("result/TestList.txt");

                File AListfile = new File("result/AList.txt");
                File RListfile = new File("result/RList.txt");
                File MListfile = new File("result/MList.txt");
                File OListfile = new File("result/OList.txt");
                File O1Listfile = new File("result/O1List.txt");
                File O2Listfile = new File("result/O2List.txt");
                File O4Listfile = new File("result/O4List.txt");



                try{
                logwriter = new PrintStream(new BufferedOutputStream(new FileOutputStream(logfile)));
                        picwriter = new PrintStream(new BufferedOutputStream(new FileOutputStream(picfile)));
                        PEwriter = new PrintStream(new BufferedOutputStream(new FileOutputStream(PEfile)));
                        errorwriter = new PrintStream(new BufferedOutputStream(new FileOutputStream(errorfile)));
                        TestListwriter = new PrintStream(new BufferedOutputStream(new FileOutputStream(TestListfile)));

                        Awriter = new PrintStream(new BufferedOutputStream(new FileOutputStream(AListfile)));
                        Rwriter = new PrintStream(new BufferedOutputStream(new FileOutputStream(RListfile)));
                        Mwriter = new PrintStream(new BufferedOutputStream(new FileOutputStream(MListfile)));
                        Owriter = new PrintStream(new BufferedOutputStream(new FileOutputStream(OListfile)));
                        O1writer = new PrintStream(new BufferedOutputStream(new FileOutputStream(O1Listfile)));
                        O2writer = new PrintStream(new BufferedOutputStream(new FileOutputStream(O2Listfile)));
                        O4writer = new PrintStream(new BufferedOutputStream(new FileOutputStream(O4Listfile)));
                }catch(IOException e){
                e.printStackTrace();
            }
            //-------------------------------------
                // 檢查讀進來的PIC值是否正確
                /*Map PICS = db.PICS.get("TS 34.121-2");
		Iterator iter = PICS.entrySet().iterator(); 
		while (iter.hasNext()) { 
    		Map.Entry entry = (Map.Entry) iter.next(); 
    		String key = (String)entry.getKey(); 
    		Pic val = (Pic)entry.getValue();
    		logwriter.println(key + " = " + val.getSupport()); 
		}*/
                //-------------------------------------
                // 檢查讀進來的Condition
                /*for(Condition con : db.CONDITIONS_3G){
		  	logwriter.println(con.getCondition_desc());		}*/
                //-------------------------------------
                //-----------Solve Conditions----------
                run();
                //-------------------------------------
                // Close All File Writer
                logwriter.close();
                picwriter.close();
                PEwriter.close();
                errorwriter.close();
                TestListwriter.close();

                Awriter.close();
                Rwriter.close();
                Mwriter.close();
                Owriter.close();
                O1writer.close();
                O2writer.close();
                O4writer.close();
                //---------------------------------------

                System.out.println("Done");
        }//main

        public static void solveCondition(Condition con){

                condition = con;
                if(!con.isDone()){
                        try{
                                EG1 parser = new EG1(new StringReader(con.getCondition_desc()));
                        //EG1.ReInit();
                        con.setResult(parser.condition());
                                con.Done();
                        writeResult(con);
                }catch (ParseException e){
                                PEwriter.println(con.getCondition_ID());
                                PEwriter.println(con.getCondition_desc());
                                PEwriter.println(e.getMessage());
                                PEwriter.println();
                }catch (Error e){
                                errorwriter.println(con.getCondition_ID());
                                errorwriter.println(con.getCondition_desc());
                                errorwriter.println(e.getMessage());
                                errorwriter.println();
                }
        }
        }
        static private void run(){
                int num = 0;
                int total = 0;
                for (Protocol p : Protocol.values()) {
                        protocol = p;

                        System.out.println(p.toString());
                        total+= db.getConditions(p).size();
                        Map conditions = db.getConditions(p);
                        Iterator iter = conditions.entrySet().iterator();
                        while (iter.hasNext()) {
                        Map.Entry entry = (Map.Entry) iter.next();
                        String key = (String)entry.getKey();
                        Condition val = (Condition)entry.getValue();
                        solveCondition(val);
                        num++;
                        }
                }

                System.out.println("Total Condition: " + num + "/" + total);
        }

        static private void writeResult(Condition con){

                switch(con.getResult()){
                case A:
                        Awriter.println(con.getCondition_ID() + "\u005ct" + con.getResult().getSymbol() +"\u005ct"+con.getCondition_desc());
                        break;
                case R:
                        Rwriter.println(con.getCondition_ID() + "\u005ct" + con.getResult().getSymbol() +"\u005ct"+con.getCondition_desc());
                        break;
                case M:
                        Mwriter.println(con.getCondition_ID() + "\u005ct" + con.getResult().getSymbol() +"\u005ct"+con.getCondition_desc());
                        break;
                case O:
                        Owriter.println(con.getCondition_ID() + "\u005ct" + con.getResult().getSymbol() +"\u005ct"+con.getCondition_desc());
                        break;
                case O1:
                        O1writer.println(con.getCondition_ID() + "\u005ct" + con.getResult().getSymbol() +"\u005ct"+con.getCondition_desc());
                        break;
                case O2:
                        O2writer.println(con.getCondition_ID() + "\u005ct" + con.getResult().getSymbol() +"\u005ct"+con.getCondition_desc());
                        break;
                case O4:
                        O4writer.println(con.getCondition_ID() + "\u005ct" + con.getResult().getSymbol() +"\u005ct"+con.getCondition_desc());
                        break;
                case VOID:
                case NA:
                default:
                        break;
                }
        }

  final public Result condition() throws ParseException {
        Result result;
    result = statement();
    jj_consume_token(0);
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Result statement() throws ParseException {
  Result b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      b = select_statement();
                                {if (true) return b;}
      break;
    case 30:
      jj_consume_token(30);
      b = select_statement();
      jj_consume_token(31);
                                  {if (true) return b;}
      break;
    case RESULT:
      b = result();
                {if (true) return b;}
      break;
    case VOID:
      jj_consume_token(VOID);
          {if (true) return Result.VOID;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Result select_statement() throws ParseException {
        boolean a;
        Result b, c;
    jj_consume_token(IF);
    a = expression();
    jj_consume_token(THEN);
    b = statement();
    jj_consume_token(ELSE);
    c = statement();
                if(a)
                        {if (true) return b;}
                else
                        {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public boolean expression() throws ParseException {
        boolean a,b;
    a = term();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(OR);
      b = term();
                                       a = a|b;
    }
                {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public boolean term() throws ParseException {
        boolean a, b;
    a = factor();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(AND);
      b = factor();
                                            a = a&b;
    }
                {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public boolean factor() throws ParseException {
        boolean b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
      jj_consume_token(30);
      b = expression();
      jj_consume_token(31);
                                  {if (true) return b;}
      break;
    case P1:
    case P2:
    case 32:
      b = pic();
                    {if (true) return b;}
      break;
    case NOT:
      jj_consume_token(NOT);
      b = factor();
                              {if (true) return !b;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Result result() throws ParseException {
    Token t;
    t = jj_consume_token(RESULT);
                logwriter.println( condition.getCondition_ID() + " " + t.toString() + " " + Result.BySymbol(t.toString()).getSymbol());
                {if (true) return Result.BySymbol(t.toString());}
    throw new Error("Missing return statement in function");
  }

  final public boolean pic() throws ParseException {
        Token pic;
        Token ver;
        HashMap<String, Pic> PICS;
        Pic p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case P1:
      pic = jj_consume_token(P1);
                      // normal PICS

                if( protocol == Protocol._2G){

                        PICS = db.PICS.get("2G");
                }else{
                        PICS = db.PICS.get(condition.getTable_spec());
                }

                if( PICS == null){
                        picwriter.println(pic.toString() + " is null.");
                        {if (true) return false;}
                }

                p = PICS.get(pic.toString());

                if(p == null){
                        picwriter.println(pic.toString() + " is null.");
                        {if (true) return false;}
                }else{
                        {if (true) return p.getSupport();}
                }
      break;
    case 32:
      jj_consume_token(32);
      ver = jj_consume_token(NUMBER);
      jj_consume_token(33);
      pic = jj_consume_token(P1);
                                           // Reference other table PICS

                int version = Integer.parseInt(ver.toString());
                switch(version){
                case 52:
                        PICS = db.PICS.get("2G");
                        break;
                case 21:
                        PICS = db.PICS.get("TS 34.121-2");
                        break;
                case 23:
                        PICS = db.PICS.get("TS 34.123-2");
                        break;
                case 56:
                        PICS = db.PICS.get("TS 36.523-1");
                        break;
                case 8:
                        PICS = db.PICS.get("TS 34.123-2");
                        break;
                default:
                        picwriter.println(pic.toString() + " is null.");
                        {if (true) return false;}
                }

                if(PICS == null){
                        picwriter.println(pic.toString() + " is null.");
                        {if (true) return false;}
                }

                p = PICS.get(pic.toString());

                if(p == null){
                        picwriter.println(pic.toString() + " is null.");
                        {if (true) return false;}
                }else
                        {if (true) return p.getSupport();}
      break;
    case P2:
      pic = jj_consume_token(P2);
                Condition con = db.getConditions(protocol).get(pic.toString());
                if(!con.isDone()){
                        solveCondition(con);
                }
                {if (true) return con.getResult().getValue();}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public EG1TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40200820,0x200,0x100,0x41800400,0x1800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x1,0x1,};
   }

  /** Constructor with InputStream. */
  public EG1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EG1(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public EG1(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public EG1(EG1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(EG1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
